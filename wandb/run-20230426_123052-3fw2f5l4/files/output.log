WARNING:tensorflow:`period` argument is deprecated. Please use `save_freq` to specify the frequency in number of batches seen.
WARNING  `period` argument is deprecated. Please use `save_freq` to specify the frequency in number of batches seen.
Epoch 1/10
2023-04-26 12:31:15.291394: I tensorflow/core/grappler/devices.cc:66] Number of eligible GPUs (core count >= 8, compute capability >= 0.0): 4
2023-04-26 12:31:15.292522: I tensorflow/core/grappler/clusters/single_machine.cc:357] Starting new session
2023-04-26 12:31:15.318318: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 78600 MB memory:  -> device: 0, name: NVIDIA A100 80GB PCIe, pci bus id: 0000:17:00.0, compute capability: 8.0
2023-04-26 12:31:15.319826: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 78600 MB memory:  -> device: 1, name: NVIDIA A100 80GB PCIe, pci bus id: 0000:65:00.0, compute capability: 8.0
2023-04-26 12:31:15.322599: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:2 with 78600 MB memory:  -> device: 2, name: NVIDIA A100 80GB PCIe, pci bus id: 0000:ca:00.0, compute capability: 8.0
2023-04-26 12:31:15.324007: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:3 with 78600 MB memory:  -> device: 3, name: NVIDIA A100 80GB PCIe, pci bus id: 0000:e3:00.0, compute capability: 8.0
2023-04-26 12:31:15.357987: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:1137] Optimization results for grappler item: graph_to_optimize
  function_optimizer: function_optimizer did nothing. time = 0.047ms.
  function_optimizer: function_optimizer did nothing. time = 0.003ms.
WARNING:tensorflow:From /home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/tensorflow/python/ops/math_ops.py:3777: tensor_shape_from_node_def_name (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.graph_util.tensor_shape_from_node_def_name`
WARNING  From /home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/tensorflow/python/ops/math_ops.py:3777: tensor_shape_from_node_def_name (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.graph_util.tensor_shape_from_node_def_name`
2023-04-26 12:31:15.627185: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)
37/37 - 9s - loss: 0.5043 - accuracy: 0.7996 - auc: 0.5416 - precision: 0.2228 - recall: 0.0484 - balanced_accuracy: 0.5063 - val_loss: 0.4559 - val_accuracy: 0.8226 - val_auc: 0.6105 - val_precision: 1.0000 - val_recall: 0.0094 - val_balanced_accuracy: 0.5043
Epoch 2/10
2023-04-26 12:31:23.449938: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.
37/37 - 0s - loss: 0.4841 - accuracy: 0.8165 - auc: 0.5735 - precision: 0.4154 - recall: 0.0638 - balanced_accuracy: 0.5227 - val_loss: 0.4323 - val_accuracy: 0.8277 - val_auc: 0.6849 - val_precision: 0.7857 - val_recall: 0.0519 - val_balanced_accuracy: 0.5233
Epoch 3/10
37/37 - 1s - loss: 0.4643 - accuracy: 0.8196 - auc: 0.6218 - precision: 0.4785 - recall: 0.0921 - balanced_accuracy: 0.5359 - val_loss: 0.4182 - val_accuracy: 0.8404 - val_auc: 0.7146 - val_precision: 0.8710 - val_recall: 0.1274 - val_balanced_accuracy: 0.5683
Epoch 4/10
37/37 - 0s - loss: 0.4432 - accuracy: 0.8266 - auc: 0.6646 - precision: 0.5707 - recall: 0.1240 - balanced_accuracy: 0.5513 - val_loss: 0.4078 - val_accuracy: 0.8446 - val_auc: 0.7353 - val_precision: 0.8333 - val_recall: 0.1651 - val_balanced_accuracy: 0.5914
Epoch 5/10
37/37 - 0s - loss: 0.4286 - accuracy: 0.8346 - auc: 0.6918 - precision: 0.6524 - recall: 0.1617 - balanced_accuracy: 0.5712 - val_loss: 0.4014 - val_accuracy: 0.8488 - val_auc: 0.7429 - val_precision: 0.8235 - val_recall: 0.1981 - val_balanced_accuracy: 0.6035
Epoch 6/10
37/37 - 0s - loss: 0.4241 - accuracy: 0.8384 - auc: 0.6945 - precision: 0.6934 - recall: 0.1736 - balanced_accuracy: 0.5770 - val_loss: 0.3955 - val_accuracy: 0.8497 - val_auc: 0.7550 - val_precision: 0.7500 - val_recall: 0.2406 - val_balanced_accuracy: 0.6185
Epoch 7/10
37/37 - 1s - loss: 0.4101 - accuracy: 0.8414 - auc: 0.7280 - precision: 0.6846 - recall: 0.2102 - balanced_accuracy: 0.5952 - val_loss: 0.3906 - val_accuracy: 0.8505 - val_auc: 0.7611 - val_precision: 0.7465 - val_recall: 0.2500 - val_balanced_accuracy: 0.6231
Epoch 8/10
37/37 - 0s - loss: 0.4026 - accuracy: 0.8420 - auc: 0.7401 - precision: 0.6988 - recall: 0.2054 - balanced_accuracy: 0.5978 - val_loss: 0.3866 - val_accuracy: 0.8497 - val_auc: 0.7667 - val_precision: 0.7361 - val_recall: 0.2500 - val_balanced_accuracy: 0.6226
Epoch 9/10
37/37 - 0s - loss: 0.3921 - accuracy: 0.8446 - auc: 0.7607 - precision: 0.7110 - recall: 0.2208 - balanced_accuracy: 0.6000 - val_loss: 0.3830 - val_accuracy: 0.8497 - val_auc: 0.7722 - val_precision: 0.7179 - val_recall: 0.2642 - val_balanced_accuracy: 0.6280
Epoch 10/10
37/37 - 1s - loss: 0.3910 - accuracy: 0.8458 - auc: 0.7607 - precision: 0.7127 - recall: 0.2314 - balanced_accuracy: 0.6058 - val_loss: 0.3800 - val_accuracy: 0.8463 - val_auc: 0.7764 - val_precision: 0.6744 - val_recall: 0.2736 - val_balanced_accuracy: 0.6299
Epoch 00010: val_loss improved from inf to 0.37997, saving model to /home/zadubrov/output/results_train/AR_single-labeled_Fold-0.model.weights.hdf5
INFO     Computation time for training the single-label model for AR: 0.27 min
<IPython.core.display.HTML object>
[ True  True  True ...  True  True  True]
<bound method Model.predict of <keras.engine.sequential.Sequential object at 0x2af476b95820>>
[[0 0 1 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
<class 'numpy.ndarray'>	4735
<class 'tuple'>	2
WARNING  Using 4735 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
  0%|                                                                                                                                    | 0/1184 [01:19<?, ?it/s]
Traceback (most recent call last):
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/__main__.py", line 415, in <module>
    main()
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/__main__.py", line 392, in main
    train(fixed_opts)
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/__main__.py", line 190, in train
    sl.train_single_label_models(df=df, opts=opts)
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/single_label_model.py", line 551, in train_single_label_models
    performance = fit_and_evaluate_model(x_train=x_train, x_test=x_test, y_train=y_train, y_test=y_test,
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/single_label_model.py", line 422, in fit_and_evaluate_model
    sd.shap_explain(x_train, x_test, model, target, opts.outputDir, drop_values=True, threshold=100, save_values=True)
  File "/gpfs0/home/zadubrov/deepFPlearn_exai/dfpl/shap_dfpl.py", line 27, in shap_explain
    explainer = shap.KernelExplainer(model, x_train[:x_train.shape():])
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/shap/explainers/_kernel.py", line 190, in shap_values
    explanations.append(self.explain(data, **kwargs))
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/shap/explainers/_kernel.py", line 217, in explain
    self.varyingInds = self.varying_groups(instance.x)
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/shap/explainers/_kernel.py", line 417, in varying_groups
    num_mismatches = np.sum(np.frompyfunc(self.not_equal, 2, 1)(x_group, self.data.data[:, inds]))
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/shap/explainers/_kernel.py", line 402, in not_equal
    return 0 if np.isclose(i, j, equal_nan=True) else 1
  File "<__array_function__ internals>", line 5, in isclose
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/numpy/core/numeric.py", line 2289, in isclose
    if all(xfin) and all(yfin):
  File "<__array_function__ internals>", line 5, in all
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 2411, in all
    return _wrapreduction(a, np.logical_and, 'all', axis, None, out, keepdims=keepdims)
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 85, in _wrapreduction
    return reduction(axis=axis, out=out, **passkwargs)
  File "/home/zadubrov/.conda/envs/dfpl_exai/lib/python3.9/site-packages/numpy/core/_methods.py", line 57, in _all
    return umr_all(a, axis, dtype, out, keepdims)
KeyboardInterrupt